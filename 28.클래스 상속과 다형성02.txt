1.상속을 활용한 클래스 구현하기 
    1) 요구사항
        - 일반고객과 이보다 충성도가 높은 우수고객에 따른 서비스를 제공하고자 한다.
        - 할인율과 적립되는 포인트 비율이 다르다 
        - 멤버십 구현을 클래스 상속을 활용하여 구현하라 

    2) 일반고객(Customer) 클래스 
        - 고객의 속성 : 고객 아이디, 고객 이름, 고객 등급, 보너스 포인트, 포인트 적립비율
        - 물품 구매시 1%보너스 포인트 적립 
        
    3) 우수고객(VIP Customer) 클래스 
        - 제품 구매시 보너스 포인트는 제품 가격의 5%적립 
        - 제품 구매시 10% 할인 
        - 담당 전문 상담원 배정 
    
2. protected 접근 제어자
    1) 상위 클래스에 선언된 private 멤버 변수는 하위 클래스에서 접근 할 수 없음
    2) 외부 클래스는 접근 할수 없지만, 하위 클래스는 접근 할수 있도록 protected 접근 제어자를 사용 

3. 상속에서 클래스 생성 과정
    1) 하위 클래스가 생성되는 과정 
        - 하위 클래스를 생성하면 상위 클래스가 먼저 생성 됨 
            - new VIPCustomer();를 호출하면 Customer()가 먼저 호출 됨       // super();에 의해서 호출 

        - 클래스가 상속 받은 경우 하위 클래스의 생성자에서는 반드시 상위 클래스의 생성자를 호출 함 
            - super();


    2) super();                             [ package kr.co.himedia.inheritance03;
                                                    public class Customer ]
        - 하위 클래스에서 가지는 상위 클래스에 대한 참조 값 
        - super();
            - '상위 클래스'의 '기본 생성자' 를 호출하는 것 
        - 하위 클래스에서 명시적으로 상위 클래스의 생성자를 호출하지 않으면 super();가 호출됨 [자동이라는소리임]
            - 반드시 상위클래스에 기본생성자가 존재해야 함 그래야 오류가 없음
        - 상위 클래스의 기본생성자가 없는 경우 [다른생성자가 있는 경우]
            - 하위클래스의 생성자에서는 super(); 이용하여 명시적으로 상위클래스 다른생성자를 호출 해야 함
                └ //없는경우 오버로드된 생성자를 호출해야 함super(오버로드생성자);
        - super();는 생성된 상위 클래스 인스턴스의 참조 값을 가지므로 
          super(); 를 이용하려 상위클래스의 메서드나 멤버변수에 접근할 수 있음 


4. 형 변환(업캐스팅, upcasting)                [ package kr.co.himedia.inheritance04;
                                                    public class CustomerTest ]

    1) 상위 클래스로 변수를 선언하고 하위 클래스의 생성자로 인스턴스 생성 
        Customer customerL = new VIPCustomer(); 
    2) 하위 클래스는 상위 클래스의 타입을 내포하고 있으므로 
       상위 클래스로의 묵시적 형 변환이 가능함 
    3) 상속 관계에서 모든 하위 클래스는 상위 클래스로 형변환(업캐스팅)이 됨 


5. 메서드 재정의 (overriding)       [package kr.co.himedia.inheritance05;
                                            public class CustomerTest02]
    1) 오버라이딩 
        - 하위클래스에서 메서드를 재정의 하는것
        - 상위클래스에 정의되어있는 메서드의 구현내용이 하위 클래스에 갔을때
          구현할 내용과 맞지 않는 경우에 하위클래스에서 동일한 이름의 메서드를 재정의 할 수 있음 

    2) 애노테이션(annotation)
        - 애노테이션은 원래 주석이라는 의미 
        - 컴파일러에게 특별한 정보를 제공해주는 역할 
        - 예)   함축적의미로 알려주는 
            - @Override : 재정의된 메서드라는 정보제공 [재정의된거야~ 라는뜻] 
                - 선언부가 기존의 메서드와 일치[같아야] 함 같지않으면 Override아님.
            - @FunctionalInterface : 함수형 인터페이스라는 정보제공 
            - @Deprecated : 이후 버전에서 사용되지 않을 수 있는 변수, 메서드에 사용됨 

6. 다형성 (polymorphism)    //ex) 리모컨 : 다양한 제조업체들의 리모컨 / 상위클래스를 두고 하위클래스 오버로이드 사용
    1) 하나의 코드가 여러 자료형으로 구현되어 실행되는 것 [여러타입으로구현]
    2) 같은 코드에서 여러 다른 실행결과가 나옴 
    3) 정보은닉, 상속과 더불어 객체지향 프로그래밍의 가장 큰 특징 중 하나임.
    4) 다형성을 잘 활용하면 유연하고 확장성있고, 상대적으로 유지보수[수정]가 편리한 프로그램을 만들 수 있음. 

7. 다형성을 사용하는 이유
    1) 상속과 메서드 재정의[오버로이드]를 활용하여 확장성 있는 프로그램을 만들 수 있음
    2) 상위 클래스에서는 공통적인 부분을 제공하고
       하위 클래스에서는 각 클래스에 맞는 기능 구현 
    3) 여러 클래스를 하나의 타입(상위클래스)으로 핸들링 할 수 있다. 
    4) 그렇지 않는 경우 많은 if ~ else if 문이 구현되고 코드의 유지보수가 어려워짐 


8. [ 멤버십 프로그램 ] 다형성 활용하여 확장하기 
    1) 일반고객과 VIP고객 중간 멤버십 만들기
        - 일반 고객보다는 많이 구매하고 VIP보다는 적게 구매하는 고객 
        - 조건 : GOLD 고객 등급 추가 
            - 제품을 살때 10% 할인
            - 제품 구매시 보너스 포인트는 제품 가격의 2%적립 
        
9. 클래스간의 관계
    1) IS-A 관계 (inheritance)
        - 일반적인(general) 개념과 구체적인(specific) 개념과의 관계
        - 상위클래스 : 하위클래스보다 일반적인 개념 (ex: Emplotee, Customer)
        - 하위클래스 : 상위클래스보다 구체적인 개념들이 더해짐 (ex: RegularEmpDTO, GoldCustomer)
        - 상속은 클래스간의 결합도가 높은 설계 
        - 상위 클래스의 수정이 많은 하위 클래스에 영향을 미칠 수 있음
        - 계층 구조가 복잡하거나 hierarchy가 높으면 좋지 않음
    
    2) HAS-A 관계 (composition)
        - 클래스가 다른 클래스를 포함하는 관계 (변수로 선언) 
        - 코드 재사용의 가장 일반적인 방법 
        - 예 ) Student가 Subject를 포함
        
10. 형 변환(다운캐스팅, downcasting)
    1) 다운캐스팅 
        - 업캐스팅된 클래스를 다시 원래의 타입으로 형 변환하는것 [강제]
        - 하위클래스로의 형 변환은 명시적으로 해야 함 
    
        - Customer Customer = new VIPCustomer();            // 묵시적 (업캐스팅)
          VIPCustomer vcustomer = (VIPCustomer)Customer;    // 명시적 (다운캐스팅)
    
    2) instanceof 를 이용하여 인스턴스의 형 체크 [Chap14(다형성)\src\kr\co\himedia\ploymophism\AnimalTest.java]
        - 원래 인스턴스의 형[타입]이 맞는지 여부를 체크하는 연산자 
        - 맞으면 true 아니면 false 를 반환 함  

    
        