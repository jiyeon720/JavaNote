1. 조건문
    1) 주어진 조건에 따라 다른 실행이 이루어지도록 구현
    2) 예로들어
        - '재산이 1천만원 이상이면 10만원을 세금으로 낸다
            그렇지 않으면 내지 않는다'
        - 만약에(재산이 1천만원 이상이면) {
            10만원을 세금으로 낸다
        }
        그렇지 않으면 {
            세금을 내지 않는다
        }

2. 단순 if
    1) 조건식이 참이면 중괄호로 둘러 싸인 블록 안의 문장들을 실행됨
    2) 
        if(조건식) {
            
            문장1;      //조건식이 참이면 실행되는 문장
            문장2;              //상동.

        }

        if(조건식)
            한문장;

3. 블럭 if문 (if ~ else 문)
    1) if의 조건식이 '참'이면 조건식 '바로 다음'의 블록이 실행되고,
            조건식이 '거짓'이면 'else문 다음'의 블록이 실행됨.
    2) ex   
        if(조건식) {
            문장1;      //조건식이 참일때 실행
        } else {
            문장2;      //조건식이 거짓일때 실행
        }

4. 조건이 여러 개 일 때의 IF문 
    1) 다중 if문
                
        if(조건식A){
                문장1;      //조건식A가 참일때 실행
        } else if(조건식 B){
                문장2;      //조건식A가 거짓이고 조건식B가 참일때 실행
        }else if(조건식 C){
                문장3;      //조건식A,B가 거짓이고 조건식C가 참일때 실행
        }...        //계속 추가로 가능. 마지막엔 else로 마무리
        else{
                문장n;      //조건식A,B,C가 거짓일때 실행
        }

    2) 중첩  if문
        - if문 안의 문장이 또 다른 if문인 경우 

5. switch~case              [SwitchCaseTest]-이클립스저장
    1) 주로 다중 선택에 사용하는데, 다중 if문보다 간결
    2) 대신에 사용 영역이 if-else에 비해 제한적
    3) 
        switch(수식){
            case 상수1:
                문장1;
                besak;      //필요하면 사용 //생략가능 besak를 만나면 switch블록을 탈출함
            case상수2:
                문장2;
                besak;      //필요하면 사용 //생략가능 besak를 만나면 switch블록을 탈출함


            ...
            default:        //필요하면 사용 //생략가능 besak를 만나면 switch블록을 탈출함
                문장N;
        }
        ex)
        package kr.co.himedia.decision04;

public class SwitchTest {

	public static void main(String[] args) {
		
		int score = 95;
		
		switch(score) {
		case 95:
			System.out.println("95점");
			break;                      
		case 94:
			System.out.println("94점");
			break;
		case 93:
			System.out.println("93점");
			break;
		default:
			System.out.println("잘못된 값입니다.");
		}
	}
}
------------95점 //besak지우면 다음 줄의 값 나오고 다음줄의besak에서멈춤
        
    4) 비교 조건이 특정 값이나 문자열인 경우 사용
    5) break문을 사용하여 각 조건이 만족되면 switch 블록을 빠져나오도록 함
    6) 좀 더 간결해진 표현식 지원됨
        - java14버전부터 지원됨
        - besak문 사용안함

6. switch 표현식 (java14버전부터)
    1) : <-간결하게쓰는편에서는 가독성 떨어짐
        간단하게 쉼표(,)로 조건 구분가능
    2) 식으로 표현하여 반환값을 받을수 있음. 리턴값이 없는 경우는 오류가 생김
    3) yield 키워드 사용 


        
    