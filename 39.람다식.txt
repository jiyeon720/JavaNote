1. 객체지향 프로그래밍 + 함수형 프로그래밍 
    1) 람다 계산식에 사용된 식을 프로그래밍 언어에 접목했다 
    2) 람다식 => 매개변수[입력값이있고 구현된게있는상태]를 가진 코드 블럭  => 익명 내부 객체 

2. 람다식 
    1) 함수형 프로그래밍에서 사용되는 함수를 간결하게 표현하기 위한 방법중 하나임 
    2) 메서드에 대한 구현을 간결하게 표현하는 방법임 
    3) (매개변수prameters) -> { 표현Expression }

3. 람다식 문법 
    1) 익명 함수 (Anonymous Function)를 생성하기 위한 식 
    2) 매개변수와 매개변수를 이용한 실행문 

    3) 예) add()함수
        - 두 수를 입력 받아 더하는 함수 
            - 기본
            int add(int x, int y){
                return x + y;
            }
            - 람다식으로 표현
            (int x, int y) -> {return x + y;} 

        - 매개변수가 하나인 경우 자료형과 괄호 생략 가능 
            ex) str -> {system.out.println(str)}

        - 매개변수가 두 개 이상인 경우 괄호를 생략할 수 없음 
            ex) x,y -> {system.out.println(x + y);}  //오류 !!!
                (int x,int y) -> {return x + y ;};
                System.out.println(addA.add(1, 2));

        - 실행문이 한 문장인 경우 중괄호 생략 가능 
            ex) str -> system.out.println(str); 
        
        - 실행문이 한 문장이더라도 return문(반환문)이 있는 경우 중괄호 생략 불가함
            ex) str -> return str.length();  //오류 !!!
        
        - 실행문이 한 문장의 실행문인 경우엔 return과 중괄호를 모두 생략 
            ex) ( x, y ) -> x + y;
                    str  ->  str.length;    // return 되는것임 생략됨
        
        - 매개변수와 타입이 유추 가능한 경우 타입 생략 가능 

4. 함수형 인터페이스 ( Functional Interface)
    1) 단 하나의 추상 메서드를 가진 인터페이스를 의미함
    2) 람다표현식을 활용 
    3) @FunctionalInterface 어노테이션을 사용하여 표시할 수 있음 
        - 이 어노테이션은 선택사항이지만, 
        - 컴파일러에게 해당 인터페이스가 함수형인터페스임을 알려주는 역할 
    4) 단일 추상 메서드 인터페이스  (SAM)
        - Single Abstract Method Interface
    5) 자바에서 함수형 인터페이스를 사용하는 이유   
        - 람다 표현식 지원 
        - 메서드[함수]를 참조 //객체를 만들지않아도 메서드만으로 기능구현 
        - Stream API와의 통합 
        - 병렬 프로그래밍 // 더 많은 수를 한꺼번에 할때..
        
5. 함수형 인터페이스 선언하기 
    1) 람다식을 선언[구현]하기 위한 인터페이스 
    2) 익명 함수와 매개변수 만으로 구현되므로 인터페이스는 단 하나의 메서드만을 선언해야 함 
    3) @FunctionalInterface 어노테이션(annotation)
        - 함수형 인터페이스라는 의미, 내부에 여러 개의 메서드를 선언하면 에러함 
    4) 람다식 구현과 호출 

    Interface Function<T,R>
    기능적 인터페이스
    - 이는 기능적 인터페이스이므로 람다 식 또는 메서드 참조의 할당 대상으로 사용할 수 있습니다.
    - 하나의 인수를 받아들이고 결과를 생성하는 함수를 나타냅니다.
      이것은 함수형 메소드가 있는 함수형 인터페이스apply(Object) 입니다.

6. Function Package
    1) java.util.function 
        매개변수가 한 개일 때
        - Interface Function<T,R>
        매개변수가 두 개일 때
        - Interface BiFunction<T,U,R>
    
    2) 아낌없이 주는 SAM [단일 추상 메서드 인터페이스] 
        Interface Supplier<T>   // 리턴만있음 
        
        - 먹튀 아낌없이 받는 SAM [단일 추상 메서드 인터페이스] 
          Interface Consumer<T>  받기만함 결과값 반환 안함 
        -   
          Interface BiConsumer<T,U>


7. OOP vs 람다식 구현
    1) 인터페이스 선언 
    2) OOP
        - 클래스(객체) 생성하고 메서드 호출하기 
    3) 람다식으로 구현 
        - 익명 객체를 생성하는 람다식 
            - 자바에서는 객체 없이 메서드가 호출될 수 없음 
            - 람다식을 구현하면 익명 내부 클래스가 만들어지고, 이를 통해 익명 객체가 생성됨 
